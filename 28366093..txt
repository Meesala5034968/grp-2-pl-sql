Database Schema

1 Creating Patients Table:
CREATE TABLE Patients (
    PATIENT_ID NUMBER PRIMARY KEY,
    FIRST_NAME VARCHAR2(50),
    LAST_NAME VARCHAR2(50),
    DATE_OF_BIRTH DATE,
    GENDER VARCHAR2(10),
    PHONE_NUMBER VARCHAR2(15),
    EMAIL VARCHAR2(100)
);

2 Creating Appointments Table:
CREATE TABLE Appointments (
    APPOINTMENT_ID NUMBER PRIMARY KEY,
    PATIENT_ID NUMBER,
    DOCTOR_ID NUMBER,
    APPOINTMENT_DATE DATE,
    APPOINTMENT_TIME VARCHAR2(10),
    STATUS VARCHAR2(20),
    FOREIGN KEY (PATIENT_ID) REFERENCES Patients(PATIENT_ID),
    FOREIGN KEY (DOCTOR_ID) REFERENCES Doctors(DOCTOR_ID)
);

3 Creating MedicalRecords Table:
CREATE TABLE MedicalRecords (
    RECORD_ID NUMBER PRIMARY KEY,
    PATIENT_ID NUMBER,
    DOCTOR_ID NUMBER,
    VISIT_DATE DATE,
    DIAGNOSIS CLOB,
    PRESCRIPTION CLOB,
    NOTES CLOB,
    FOREIGN KEY (PATIENT_ID) REFERENCES Patients(PATIENT_ID),
    FOREIGN KEY (DOCTOR_ID) REFERENCES Doctors(DOCTOR_ID)
);

4 Creating Doctors Table:
CREATE TABLE Doctors (
    DOCTOR_ID NUMBER PRIMARY KEY,
    FIRST_NAME VARCHAR2(50),
    LAST_NAME VARCHAR2(50),
    SPECIALTY VARCHAR2(50),
    PHONE_NUMBER VARCHAR2(15),
    EMAIL VARCHAR2(100)
);

Inserting Data into Tables

1 Inserting into Patients Table:
INSERT ALL
    INTO Patients (PATIENT_ID, FIRST_NAME, LAST_NAME, DATE_OF_BIRTH, GENDER, PHONE_NUMBER, EMAIL)
    VALUES (1, 'Varaprasad', 'meesala', TO_DATE('1980-01-15', 'YYYY-MM-DD'), 'Male', '555-1234', 'varaprasad@gmail.com')
    
    INTO Patients (PATIENT_ID, FIRST_NAME, LAST_NAME, DATE_OF_BIRTH, GENDER, PHONE_NUMBER, EMAIL)
    VALUES (2, 'Teju', 'Reddy', TO_DATE('1990-07-22', 'YYYY-MM-DD'), 'Female', '555-5678', 'tejureddy@gmail.com')
    
    INTO Patients (PATIENT_ID, FIRST_NAME, LAST_NAME, DATE_OF_BIRTH, GENDER, PHONE_NUMBER, EMAIL)
    VALUES (3, 'Chandu', 'Mishra', TO_DATE('1985-03-05', 'YYYY-MM-DD'), 'Male', '555-6789', 'chandumishra@gmail.com')
SELECT * FROM dual;

2 Inserting into Appointments Table:
INSERT ALL
    INTO Appointments (APPOINTMENT_ID, PATIENT_ID, DOCTOR_ID, APPOINTMENT_DATE, APPOINTMENT_TIME, STATUS)
    VALUES (1, 1, 1, TO_DATE('2024-09-01', 'YYYY-MM-DD'), '10:00 AM', 'Scheduled')
    
    INTO Appointments (APPOINTMENT_ID, PATIENT_ID, DOCTOR_ID, APPOINTMENT_DATE, APPOINTMENT_TIME, STATUS)
    VALUES (2, 2, 2, TO_DATE('2024-09-02', 'YYYY-MM-DD'), '11:00 AM', 'Scheduled')
    
    INTO Appointments (APPOINTMENT_ID, PATIENT_ID, DOCTOR_ID, APPOINTMENT_DATE, APPOINTMENT_TIME, STATUS)
    VALUES (3, 3, 1, TO_DATE('2024-10-05', 'YYYY-MM-DD'), '11:00 AM', 'Scheduled')
SELECT * FROM dual;

3 Inserting into MedicalRecords Table:
INSERT ALL
    INTO MedicalRecords (RECORD_ID, PATIENT_ID, DOCTOR_ID, VISIT_DATE, DIAGNOSIS, PRESCRIPTION, NOTES)
    VALUES (1, 1, 1, TO_DATE('2024-10-01', 'YYYY-MM-DD'), 'Hypertension', 'Lisinopril', 'Patient needs to monitor blood pressure regularly.')
    
    INTO MedicalRecords (RECORD_ID, PATIENT_ID, DOCTOR_ID, VISIT_DATE, DIAGNOSIS, PRESCRIPTION, NOTES)
    VALUES (2, 2, 2, TO_DATE('2024-10-02', 'YYYY-MM-DD'), 'Skin Rash', 'Hydrocortisone Cream', 'Follow-up in 2 weeks if symptoms persist.')
    
    INTO MedicalRecords (RECORD_ID, PATIENT_ID, DOCTOR_ID, VISIT_DATE, DIAGNOSIS, PRESCRIPTION, NOTES)
    VALUES (3, 3, 2, TO_DATE('2024-10-03', 'YYYY-MM-DD'), 'Migraine', 'Ibuprofen', 'Patient should avoid triggers.')
SELECT * FROM dual;

4 Inserting into Doctors Table:
INSERT ALL
    INTO Doctors (DOCTOR_ID, FIRST_NAME, LAST_NAME, SPECIALTY, PHONE_NUMBER, EMAIL)
    VALUES (1, 'Ram', 'Rao', 'Cardiologist', '555-9876', 'ramrao@gmail.com')
    
    INTO Doctors (DOCTOR_ID, FIRST_NAME, LAST_NAME, SPECIALTY, PHONE_NUMBER, EMAIL)
    VALUES (2, 'Prasanth', 'Verma', 'Dermatologist', '555-6543', 'prasanthverma@gmail.com')
    
    INTO Doctors (DOCTOR_ID, FIRST_NAME, LAST_NAME, SPECIALTY, PHONE_NUMBER, EMAIL)
    VALUES (3, 'Bharth', 'Singh', 'Neurologist', '555-3210', 'bharth.singh@gmail.com')
SELECT * FROM dual;

Developing PL/SQL Procedures:

1 Procedure for Patient Management:
CREATE OR REPLACE PROCEDURE ManagePatient (
    p_action IN VARCHAR2,
    p_patient_id IN NUMBER,
    p_first_name IN VARCHAR2,
    p_last_name IN VARCHAR2,
    p_date_of_birth IN DATE,
    p_gender IN VARCHAR2,
    p_phone_number IN VARCHAR2,
    p_email IN VARCHAR2
) AS
BEGIN
    IF p_action = 'INSERT' THEN
        INSERT INTO Patients (PATIENT_ID, FIRST_NAME, LAST_NAME, DATE_OF_BIRTH, GENDER, PHONE_NUMBER, EMAIL)
        VALUES (p_patient_id, p_first_name, p_last_name, p_date_of_birth, p_gender, p_phone_number, p_email);
    ELSIF p_action = 'UPDATE' THEN
        UPDATE Patients
        SET FIRST_NAME = p_first_name,
            LAST_NAME = p_last_name,
            DATE_OF_BIRTH = p_date_of_birth,
            GENDER = p_gender,
            PHONE_NUMBER = p_phone_number,
            EMAIL = p_email
        WHERE PATIENT_ID = p_patient_id;
    ELSIF p_action = 'DELETE' THEN
        DELETE FROM Patients WHERE PATIENT_ID = p_patient_id;
    END IF;
END;

2 Procedure for Appointment Scheduling:
CREATE OR REPLACE PROCEDURE ManageAppointment (
    p_action IN VARCHAR2,
    p_appointment_id IN NUMBER,
    p_patient_id IN NUMBER,
    p_doctor_id IN NUMBER,
    p_appointment_date IN DATE,
    p_appointment_time IN VARCHAR2,
    p_status IN VARCHAR2
) AS
BEGIN
    IF p_action = 'INSERT' THEN
        INSERT INTO Appointments (APPOINTMENT_ID, PATIENT_ID, DOCTOR_ID, APPOINTMENT_DATE, APPOINTMENT_TIME, STATUS)
        VALUES (p_appointment_id, p_patient_id, p_doctor_id, p_appointment_date, p_appointment_time, p_status);
    ELSIF p_action = 'UPDATE' THEN
        UPDATE Appointments
        SET PATIENT_ID = p_patient_id,
            DOCTOR_ID = p_doctor_id,
            APPOINTMENT_DATE = p_appointment_date,
            APPOINTMENT_TIME = p_appointment_time,
            STATUS = p_status
        WHERE APPOINTMENT_ID = p_appointment_id;
    ELSIF p_action = 'CANCEL' THEN
        UPDATE Appointments
        SET STATUS = 'Cancelled'
        WHERE APPOINTMENT_ID = p_appointment_id;
    ELSIF p_action = 'DELETE' THEN
        DELETE FROM Appointments WHERE APPOINTMENT_ID = p_appointment_id;
    END IF;
END;

3 Procedure for Medical Record Keeping:
CREATE OR REPLACE PROCEDURE ManageMedicalRecord (
    p_action IN VARCHAR2,
    p_record_id IN NUMBER,
    p_patient_id IN NUMBER,
    p_doctor_id IN NUMBER,
    p_visit_date IN DATE,
    p_diagnosis IN CLOB,
    p_prescription IN CLOB,
    p_notes IN CLOB
) AS
BEGIN
    IF p_action = 'INSERT' THEN
        INSERT INTO MedicalRecords (RECORD_ID, PATIENT_ID, DOCTOR_ID, VISIT_DATE, DIAGNOSIS, PRESCRIPTION, NOTES)
        VALUES (p_record_id, p_patient_id, p_doctor_id, p_visit_date, p_diagnosis, p_prescription, p_notes);
    ELSIF p_action = 'UPDATE' THEN
        UPDATE MedicalRecords
SET PATIENT_ID = p_patient_id,
            DOCTOR_ID = p_doctor_id,
            VISIT_DATE = p_visit_date,
            DIAGNOSIS = p_diagnosis,
            PRESCRIPTION = p_prescription,
            NOTES = p_notes
        WHERE RECORD_ID = p_record_id;
    END IF;
END;

TESTING:

Testing for ManagePatient Procedure

1 Here we are inserting a new patient
BEGIN
    ManagePatient(
        p_action => 'INSERT',
        p_patient_id => 4,
        p_first_name => 'Priya',
        p_last_name => 'Nair',
        p_date_of_birth => TO_DATE('1992-04-10', 'YYYY-MM-DD'),
        p_gender => 'Female',
        p_phone_number => '555-4321',
        p_email => 'priyanair@gmail.com'
    );
END;

-- Query to verify the insertion:
SELECT * FROM Patients WHERE PATIENT_ID = 4;

2 Updating an Existing Patient:
BEGIN
    ManagePatient(
        p_action => 'UPDATE',
        p_patient_id => 1,
        p_first_name => 'Varaprasad',
        p_last_name => 'meesala',
        p_date_of_birth => TO_DATE('1980-01-15', 'YYYY-MM-DD'),
        p_gender => 'Male',
        p_phone_number => '555-9999',
        p_email => 'varaprasad@gmail.com'
    );
END;

-- Query to verify the update:
SELECT * FROM Patients WHERE PATIENT_ID = 1;

3 Deleting a Patient:
BEGIN
    ManagePatient(
        p_action => 'DELETE',
        p_patient_id => 2,
        p_first_name => NULL,
        p_last_name => NULL,
        p_date_of_birth => NULL,
        p_gender => NULL,
        p_phone_number => NULL,
        p_email => NULL
    );
END;

-- Query to verify the deletion:
SELECT * FROM Patients WHERE PATIENT_ID = 2;

Testing for ManageAppointment Procedure

1 Scheduling a New Appointment:
BEGIN
    ManageAppointment(
        p_action => 'INSERT',
        p_appointment_id => 4,
        p_patient_id => 4,
        p_doctor_id => 2,
        p_appointment_date => TO_DATE('2024-10-10', 'YYYY-MM-DD'),
        p_appointment_time => '12:00',
        p_status => 'Scheduled'
    );
END;

-- Query to verify the insertion:
SELECT * FROM Appointments WHERE APPOINTMENT_ID = 4;

2 Updating an Existing Appointment:
BEGIN
    ManageAppointment(
        p_action => 'UPDATE',
        p_appointment_id => 1,
        p_patient_id => 1,
        p_doctor_id => 1,
        p_appointment_date => TO_DATE('2024-10-01', 'YYYY-MM-DD'),
        p_appointment_time => '09:30',
        p_status => 'Rescheduled'
    );
END;

-- Query to verify the update:
SELECT * FROM Appointments WHERE APPOINTMENT_ID = 1;

3 Cancelling an Appointment:
BEGIN
    ManageAppointment(
        p_action => 'CANCEL',
        p_appointment_id => 2,
        p_patient_id => NULL,
        p_doctor_id => NULL,
        p_appointment_date => NULL,
        p_appointment_time => NULL,
        p_status => NULL
    );
END;

-- Query to verify the cancellation:
SELECT * FROM Appointments WHERE APPOINTMENT_ID = 2;

Testing for ManageMedicalRecord Procedure

1 Adding a New Medical Record:
BEGIN
    ManageMedicalRecord(
        p_action => 'INSERT',
        p_record_id => 4,
        p_patient_id => 4,
        p_doctor_id => 3,
        p_visit_date => TO_DATE('2024-10-04', 'YYYY-MM-DD'),
        p_diagnosis => 'Asthma',
        p_prescription => 'Albuterol Inhaler',
        p_notes => 'Patient should carry the inhaler at all times.'
    );
END;

-- Query to verify the insertion:
SELECT * FROM MedicalRecords WHERE RECORD_ID = 4;

2 Updating an Existing Medical Record:
BEGIN
    ManageMedicalRecord(
        p_action => 'UPDATE',
        p_record_id => 1,
        p_patient_id => 1,
        p_doctor_id => 1,
        p_visit_date => TO_DATE('2024-10-01', 'YYYY-MM-DD'),
        p_diagnosis => 'Chronic Hypertension',
        p_prescription => 'Lisinopril, Amlodipine',
        p_notes => 'Patient requires regular monitoring and medication adjustment.'
    );
END;

-- Query to verify the update:
SELECT * FROM MedicalRecords WHERE RECORD_ID = 1;
